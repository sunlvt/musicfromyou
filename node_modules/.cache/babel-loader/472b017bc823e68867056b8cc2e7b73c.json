{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useIPFS } from \"./useIPFS\";\n\nconst useAudio = nftAlbum => {\n  _s();\n\n  const {\n    resolveLink\n  } = useIPFS();\n  const [audio, setAudio] = useState(nftAlbum);\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [newSong, setNewSong] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const audioRef = useRef(new Audio(resolveLink(JSON.parse(audio[trackIndex].metadata).animation_nftAlbum)));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(audio.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < audio.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    toggle();\n    setAudio(nftAlbum);\n\n    if (trackIndex === 0) {\n      setNewSong(newSong + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  }, [nftAlbum]);\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      clearInterval(intervalRef.current);\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(resolveLink(JSON.parse(audio[trackIndex].metadata).animation_nftAlbum));\n    audioRef.current.volume = volume;\n    setTrackProgress(Math.round(audioRef.current.currentTime));\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [trackIndex, newSong]);\n\n  const toggle = () => setIsPlaying(!isPlaying);\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(Math.round(audioRef.current.currentTime));\n      }\n    }, [1000]);\n  };\n\n  const onSearch = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onSearchEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  const onVolume = vol => {\n    setVolume(vol);\n    audioRef.current.volume = vol;\n  };\n\n  return [isPlaying, duration, toggle, toNextTrack, toPrevTrack, trackProgress, onSearch, onSearchEnd, onVolume, trackIndex];\n};\n\n_s(useAudio, \"VBitnSQY49m2rJA2wyqoMcko2R4=\", false, function () {\n  return [useIPFS];\n});\n\nexport default useAudio;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Máy tính/HK1-2023/DA/Decentralized-Spotify-main/src/hooks/useAudio.js"],"names":["React","useState","useEffect","useRef","useIPFS","useAudio","nftAlbum","resolveLink","audio","setAudio","trackIndex","setTrackIndex","newSong","setNewSong","trackProgress","setTrackProgress","isPlaying","setIsPlaying","volume","setVolume","audioRef","Audio","JSON","parse","metadata","animation_nftAlbum","intervalRef","isReady","duration","current","toPrevTrack","length","toNextTrack","toggle","play","startTimer","clearInterval","pause","Math","round","currentTime","setInterval","ended","onSearch","value","onSearchEnd","onVolume","vol"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useIPFS } from \"./useIPFS\";\n\nconst useAudio = (nftAlbum) => {\n  const { resolveLink } = useIPFS();\n  const [audio, setAudio] = useState(nftAlbum);\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [newSong, setNewSong] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const audioRef = useRef(\n    new Audio(\n      resolveLink(JSON.parse(audio[trackIndex].metadata).animation_nftAlbum)\n    )\n  );\n\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const { duration } = audioRef.current;\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(audio.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < audio.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    toggle();\n    setAudio(nftAlbum);\n    if (trackIndex === 0) {\n      setNewSong(newSong + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  }, [nftAlbum]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      clearInterval(intervalRef.current);\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(\n      resolveLink(JSON.parse(audio[trackIndex].metadata).animation_nftAlbum)\n    );\n    audioRef.current.volume = volume;\n    setTrackProgress(Math.round(audioRef.current.currentTime));\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [trackIndex, newSong]);\n\n  const toggle = () => setIsPlaying(!isPlaying);\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(Math.round(audioRef.current.currentTime));\n      }\n    }, [1000]);\n  };\n\n  const onSearch = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onSearchEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n    startTimer();\n  };\n\n  const onVolume = (vol) => {\n    setVolume(vol);\n    audioRef.current.volume = vol;\n  };\n\n  return [\n    isPlaying,\n    duration,\n    toggle,\n    toNextTrack,\n    toPrevTrack,\n    trackProgress,\n    onSearch,\n    onSearchEnd,\n    onVolume,\n    trackIndex,\n  ];\n};\n\nexport default useAudio;\n"]},"metadata":{},"sourceType":"module"}