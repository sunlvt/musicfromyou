{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\HK1-2023\\\\DA\\\\Decentralized-Spotify-main\\\\src\\\\components\\\\AudioPlayer.js\",\n    _s = $RefreshSig$();\n\nimport useAudio from \"../hooks/useAudio\";\nimport { Slider } from \"antd\";\nimport { useIPFS } from \"../hooks/useIPFS\";\nimport \"./AudioPlayer.css\";\nimport { SoundOutlined, StepBackwardOutlined, StepForwardOutlined, PlayCircleFilled, PauseCircleFilled } from \"@ant-design/icons\"; // const Player = ({ url }) =>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioPlayer(_ref) {\n  _s();\n\n  let {\n    nftA\n  } = _ref;\n  const {\n    resolveLink\n  } = useIPFS();\n  const [playing, duration, toggle, toNextTrack, toPrevTrack, trackProgress, onSearch, onSearchEnd, onVolume, trackIndex] = useAudio(url);\n\n  const minSec = secs => {\n    const minutes = Math.floor(secs / 60);\n    const returnMin = minutes < 10 ? `0${minutes}` : minutes;\n    const seconds = Math.floor(secs % 60);\n    const returnSec = seconds < 10 ? `0${seconds}` : seconds;\n    return `${returnMin}:${returnSec}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        width: \"300px\",\n        justifyContent: \"start\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"cover\",\n        src: resolveLink(JSON.parse(url[trackIndex].metadata).image),\n        alt: \"currentCover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"songTitle\",\n          children: JSON.parse(url[trackIndex].metadata).name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"songAlbum\",\n          children: url[trackIndex].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(StepBackwardOutlined, {\n          className: \"forback\",\n          onClick: toPrevTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), playing ? /*#__PURE__*/_jsxDEV(PauseCircleFilled, {\n          className: \"pauseplay\",\n          onClick: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(PlayCircleFilled, {\n          className: \"pauseplay\",\n          onClick: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StepForwardOutlined, {\n          className: \"forback\",\n          onClick: toNextTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [minSec(trackProgress), /*#__PURE__*/_jsxDEV(Slider, {\n          value: trackProgress,\n          step: 1,\n          min: 0,\n          max: duration ? duration : 0,\n          className: \"progress\",\n          tooltipVisible: false,\n          onChange: value => onSearch(value),\n          onAfterChange: onSearchEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), duration ? minSec(Math.round(duration)) : \"00:00\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"soundDiv\",\n      children: [/*#__PURE__*/_jsxDEV(SoundOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        className: \"volume\",\n        defaultValue: 100,\n        tooltipVisible: false,\n        onChange: value => onVolume(value / 100)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AudioPlayer, \"bIihbWEWiVI2SoOOyftGoj5jRDM=\", false, function () {\n  return [useIPFS, useAudio];\n});\n\n_c = AudioPlayer;\n;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/MÃ¡y tÃ­nh/HK1-2023/DA/Decentralized-Spotify-main/src/components/AudioPlayer.js"],"names":["useAudio","Slider","useIPFS","SoundOutlined","StepBackwardOutlined","StepForwardOutlined","PlayCircleFilled","PauseCircleFilled","AudioPlayer","nftA","resolveLink","playing","duration","toggle","toNextTrack","toPrevTrack","trackProgress","onSearch","onSearchEnd","onVolume","trackIndex","url","minSec","secs","minutes","Math","floor","returnMin","seconds","returnSec","width","justifyContent","JSON","parse","metadata","image","name","value","round","Player"],"mappings":"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","sourcesContent":["import useAudio from \"../hooks/useAudio\";\nimport { Slider } from \"antd\";\nimport { useIPFS } from \"../hooks/useIPFS\";\nimport \"./AudioPlayer.css\";\nimport {\n  SoundOutlined,\n  StepBackwardOutlined,\n  StepForwardOutlined,\n  PlayCircleFilled,\n  PauseCircleFilled,\n} from \"@ant-design/icons\";\n\n// const Player = ({ url }) =>\nfunction AudioPlayer({nftA}) {\n  const { resolveLink } = useIPFS();\n  const [\n    playing,\n    duration,\n    toggle,\n    toNextTrack,\n    toPrevTrack,\n    trackProgress,\n    onSearch,\n    onSearchEnd,\n    onVolume,\n    trackIndex,\n  ] = useAudio(url);\n\n  const minSec = (secs) => {\n    const minutes = Math.floor(secs / 60);\n    const returnMin = minutes < 10 ? `0${minutes}` : minutes;\n    const seconds = Math.floor(secs % 60);\n    const returnSec = seconds < 10 ? `0${seconds}` : seconds;\n\n    return `${returnMin}:${returnSec}`;\n  };\n\n  return (\n    <>\n      <div\n        className=\"buttons\"\n        style={{ width: \"300px\", justifyContent: \"start\" }}\n      >\n        <img\n          className=\"cover\"\n          src={resolveLink(JSON.parse(url[trackIndex].metadata).image)}\n          alt=\"currentCover\"\n        />\n        <div>\n          <div className=\"songTitle\">\n            {JSON.parse(url[trackIndex].metadata).name}\n          </div>\n          <div className=\"songAlbum\">{url[trackIndex].name}</div>\n        </div>\n      </div>\n      <div>\n        <div className=\"buttons\">\n          <StepBackwardOutlined className=\"forback\" onClick={toPrevTrack} />\n          {playing ? (\n            <PauseCircleFilled className=\"pauseplay\" onClick={toggle} />\n          ) : (\n            <PlayCircleFilled className=\"pauseplay\" onClick={toggle} />\n          )}\n          <StepForwardOutlined className=\"forback\" onClick={toNextTrack} />\n        </div>\n        <div className=\"buttons\">\n          {minSec(trackProgress)}\n          <Slider\n            value={trackProgress}\n            step={1}\n            min={0}\n            max={duration ? duration : 0}\n            className=\"progress\"\n            tooltipVisible={false}\n            onChange={(value) => onSearch(value)}\n            onAfterChange={onSearchEnd}\n          />\n          {duration ? minSec(Math.round(duration)) : \"00:00\"}\n        </div>\n      </div>\n      <div className=\"soundDiv\">\n        <SoundOutlined />\n        <Slider\n          className=\"volume\"\n          defaultValue={100}\n          tooltipVisible={false}\n          onChange={(value) => onVolume(value / 100)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}