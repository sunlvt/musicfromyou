{"ast":null,"code":"var _jsxFileName = \"D:\\\\github\\\\react\\\\Decentralized-Spotify\\\\src\\\\components\\\\AudioPlayer.js\",\n    _s = $RefreshSig$();\n\nimport useAudio from \"../hooks/useAudio\";\nimport { Slider } from \"antd\";\nimport { useIPFS } from \"../hooks/useIPFS\";\nimport \"./AudioPlayer.css\";\nimport { SoundOutlined, StepBackwardOutlined, StepForwardOutlined, PlayCircleFilled, PauseCircleFilled } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    url\n  } = _ref;\n  const {\n    resolveLink\n  } = useIPFS();\n  const [playing, duration, toggle, toNextTrack, toPrevTrack, trackProgress, onSearch, onSearchEnd, onVolume, trackIndex] = useAudio(url);\n\n  const minSec = secs => {\n    const minutes = Math.floor(secs / 60);\n    const returnMin = minutes < 10 ? `0${minutes}` : minutes;\n    const seconds = Math.floor(secs % 60);\n    const returnSec = seconds < 10 ? `0${seconds}` : seconds;\n    return `${returnMin}:${returnSec}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      style: {\n        width: \"300px\",\n        justifyContent: \"start\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"cover\",\n        src: resolveLink(JSON.parse(url[trackIndex].metadata).image),\n        alt: \"currentCover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"songTitle\",\n          children: JSON.parse(url[trackIndex].metadata).name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"songAlbum\",\n          children: url[trackIndex].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(StepBackwardOutlined, {\n          className: \"forback\",\n          onClick: toPrevTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), playing ? /*#__PURE__*/_jsxDEV(PauseCircleFilled, {\n          className: \"pauseplay\",\n          onClick: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(PlayCircleFilled, {\n          className: \"pauseplay\",\n          onClick: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StepForwardOutlined, {\n          className: \"forback\",\n          onClick: toNextTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [minSec(trackProgress), /*#__PURE__*/_jsxDEV(Slider, {\n          value: trackProgress,\n          step: 1,\n          min: 0,\n          max: duration ? duration : 0,\n          className: \"progress\",\n          tooltipVisible: false,\n          onChange: value => onSearch(value),\n          onAfterChange: onSearchEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this), duration ? minSec(Math.round(duration)) : \"00:00\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"soundDiv\",\n      children: [/*#__PURE__*/_jsxDEV(SoundOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        className: \"volume\",\n        defaultValue: 100,\n        tooltipVisible: false,\n        onChange: value => onVolume(value / 100)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Player, \"0qYj6BC6Mnc55pbXo0HnEzVWlI0=\", false, function () {\n  return [useIPFS, useAudio];\n});\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["D:/github/react/Decentralized-Spotify/src/components/AudioPlayer.js"],"names":["useAudio","Slider","useIPFS","SoundOutlined","StepBackwardOutlined","StepForwardOutlined","PlayCircleFilled","PauseCircleFilled","Player","url","resolveLink","playing","duration","toggle","toNextTrack","toPrevTrack","trackProgress","onSearch","onSearchEnd","onVolume","trackIndex","minSec","secs","minutes","Math","floor","returnMin","seconds","returnSec","width","justifyContent","JSON","parse","metadata","image","name","value","round"],"mappings":"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","sourcesContent":["import useAudio from \"../hooks/useAudio\";\r\nimport {Slider} from \"antd\";\r\nimport { useIPFS } from \"../hooks/useIPFS\";\r\nimport \"./AudioPlayer.css\";\r\nimport { SoundOutlined, StepBackwardOutlined, StepForwardOutlined, PlayCircleFilled, PauseCircleFilled} from \"@ant-design/icons\";\r\n\r\n\r\nconst Player = ({ url }) => {\r\n  const {resolveLink} = useIPFS();\r\n  const [\r\n    playing,\r\n    duration,\r\n    toggle,\r\n    toNextTrack,\r\n    toPrevTrack,\r\n    trackProgress,\r\n    onSearch,\r\n    onSearchEnd,\r\n    onVolume,\r\n    trackIndex\r\n  ] = useAudio(url);\r\n\r\n  \r\n  const minSec = (secs) => {\r\n    const minutes = Math.floor(secs / 60);\r\n    const returnMin = minutes < 10 ? `0${minutes}` : minutes;\r\n    const seconds = Math.floor(secs % 60);\r\n    const returnSec = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return `${returnMin}:${returnSec}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className=\"buttons\" style={{width:\"300px\", justifyContent:\"start\"}}>\r\n        <img className=\"cover\" src={resolveLink(JSON.parse(url[trackIndex].metadata).image)} alt=\"currentCover\" />\r\n        <div>\r\n        <div className=\"songTitle\">{JSON.parse(url[trackIndex].metadata).name}</div>\r\n        <div className=\"songAlbum\">{url[trackIndex].name}</div>\r\n        </div>\r\n    </div>\r\n    <div>\r\n      <div className=\"buttons\">\r\n        <StepBackwardOutlined className=\"forback\" onClick={toPrevTrack} />\r\n        {playing ? \r\n            <PauseCircleFilled className=\"pauseplay\" onClick={toggle} /> :\r\n            <PlayCircleFilled className=\"pauseplay\" onClick={toggle} />\r\n        }\r\n        <StepForwardOutlined className=\"forback\" onClick={toNextTrack} />\r\n      </div>\r\n      <div className=\"buttons\">\r\n      {minSec(trackProgress)}\r\n      <Slider\r\n        value={trackProgress}\r\n        step={1}\r\n        min={0}\r\n        max={duration ? duration : 0}\r\n        className=\"progress\" \r\n        tooltipVisible={false}\r\n        onChange={(value) => onSearch(value)}\r\n        onAfterChange={onSearchEnd}\r\n      />\r\n      {duration ? minSec(Math.round(duration)) : \"00:00\"}\r\n      </div>\r\n    </div>\r\n    <div className=\"soundDiv\">\r\n          <SoundOutlined />\r\n          <Slider \r\n            className=\"volume\" \r\n            defaultValue={100} \r\n            tooltipVisible={false}\r\n            onChange={(value) => onVolume(value/100)}\r\n          />\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}